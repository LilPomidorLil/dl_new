function(xsdnn_print text)
    set(status_cond)
    set(status_then)
    set(status_else)

    set(status_current_name "cond")
    foreach(arg ${ARGN})
        if(arg STREQUAL "THEN")
            set(status_current_name "then")
        elseif(arg STREQUAL "ELSE")
            set(status_current_name "else")
        else()
            list(APPEND status_${status_current_name} ${arg})
        endif()
    endforeach()

    if(DEFINED status_cond)
        set(status_placeholder_length 23)
        string(RANDOM LENGTH ${status_placeholder_length} ALPHABET " " status_placeholder)
        string(LENGTH "${text}" status_text_length)
        if(status_text_length LESS status_placeholder_length)
            string(SUBSTRING "${text}${status_placeholder}" 0 ${status_placeholder_length} status_text)
        elseif(DEFINED status_then OR DEFINED status_else)
            message(STATUS "${text}")
            set(status_text "${status_placeholder}")
        else()
            set(status_text "${text}")
        endif()

        if(DEFINED status_then OR DEFINED status_else)
            if(${status_cond})
                string(REPLACE ";" " " status_then "${status_then}")
                string(REGEX REPLACE "^[ \t]+" "" status_then "${status_then}")
                message(STATUS "${status_text} ${status_then}")
            else()
                string(REPLACE ";" " " status_else "${status_else}")
                string(REGEX REPLACE "^[ \t]+" "" status_else "${status_else}")
                message(STATUS "${status_text} ${status_else}")
            endif()
        else()
            string(REPLACE ";" " " status_cond "${status_cond}")
            string(REGEX REPLACE "^[ \t]+" "" status_cond "${status_cond}")
            message(STATUS "${status_text} ${status_cond}")
        endif()
    else()
        message(STATUS "${text}")
    endif()
endfunction()

function(xsdnn_print_configuration_summary)

    xsdnn_print("")
    xsdnn_print("******************* xsdnn Technology Build Configuration Summary *******************")
    xsdnn_print("General:")
    xsdnn_print("   Version                     :               ${PROJECT_VERSION}")
    xsdnn_print("   System                      :               ${CMAKE_SYSTEM_NAME}")
    xsdnn_print("   C++ Compiler                :               ${CMAKE_CXX_COMPILER}")
    xsdnn_print("   XNNPACK engine              :               ${xsdnn_BUILD_XNNPACK_ENGINE}")
    xsdnn_print("   Debug CXX flags             :               ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")
    xsdnn_print("   Release CXX flags           :               ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
    xsdnn_print("   RelWithDebInfo CXX flags    :               ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
    xsdnn_print("   Build type                  :               ${CMAKE_BUILD_TYPE}")
    xsdnn_print("")
    xsdnn_print("CPU Intrisics:")
    xsdnn_print("   SSE              : " xsdnn_USE_SSE THEN "YES" ELSE "NO")
    xsdnn_print("")
    xsdnn_print("Dependencies:")
    xsdnn_print("   OMP              : " xsdnn_USE_OPENMP AND OPENMP_FOUND THEN "YES" ELSE "NO")
    xsdnn_print("")
    xsdnn_print("Install:")
    xsdnn_print("  Install path      :   ${CMAKE_INSTALL_PREFIX}")
    xsdnn_print("")
    xsdnn_print("Other:")
    xsdnn_print("  Shared            : " BUILD_SHARED_LIBS THEN "YES" ELSE "NO")
    xsdnn_print("")
    xsdnn_print("******************* xsdnn Technology Build Configuration Summary *******************")

endfunction()